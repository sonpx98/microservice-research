import type { TarotCard } from '../data/tarotCards';
import type { ReadingType } from '../data/readingTypes';

// Groq API - Free tier v·ªõi Llama 3.1
const GROQ_API_URL = import.meta.env.DEV 
  ? '/api/groq/openai/v1/chat/completions'  // Use proxy in development
  : 'https://api.groq.com/openai/v1/chat/completions'; // Direct in production

export interface AIReadingResponse {
  interpretation: string;
  advice: string;
  meditation: string;
}

// Create prompt based on reading type
function createContextualPrompt(
  cards: [TarotCard, TarotCard, TarotCard], 
  readingType: ReadingType
): string {
  const contexts = {
    general: 'v·∫≠n m·ªánh v√† cu·ªôc s·ªëng t·ªïng qu√°t',
    love: 't√¨nh c·∫£m, t√¨nh y√™u v√† m·ªëi quan h·ªá',
    career: 's·ª± nghi·ªáp, c√¥ng vi·ªác v√† ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp',
    money: 't√†i ch√≠nh, ti·ªÅn b·∫°c v√† th·ªãnh v∆∞·ª£ng',
    challenges: 'nh·ªØng th√°ch th·ª©c v√† kh√≥ khƒÉn s·∫Øp t·ªõi',
    opportunities: 'nh·ªØng c∆° h·ªôi v√† ƒëi·ªÅu thu·∫≠n l·ª£i s·∫Øp ƒë·∫øn'
  };

  const context = contexts[readingType.id as keyof typeof contexts] || contexts.general;

  return `B·∫°n l√† m·ªôt chuy√™n gia gi·∫£i tarot chuy√™n nghi·ªáp v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám. 
H√£y gi·∫£i th√≠ch tr·∫£i b√†i tarot 3 l√° trong ng·ªØ c·∫£nh ${context}.

Th√¥ng tin tr·∫£i b√†i:
${readingType.interpretation.past}: ${cards[0].name} - ${cards[0].meaning.upright}
${readingType.interpretation.present}: ${cards[1].name} - ${cards[1].meaning.upright}
${readingType.interpretation.future}: ${cards[2].name} - ${cards[2].meaning.upright}

Ch·ªß ƒë·ªÅ t·∫≠p trung: ${readingType.title} (${readingType.description})

H√£y tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng markdown sau:

**interpretation**
[Gi·∫£i th√≠ch chi ti·∫øt h√†nh tr√¨nh qua 3 th·ªùi k·ª≥ trong ng·ªØ c·∫£nh ${context}, k·∫øt n·ªëi c√°c l√° b√†i th√†nh m·ªôt c√¢u chuy·ªán m·∫°ch l·∫°c, 150-200 t·ª´]

**advice**
[L·ªùi khuy√™n c·ª• th·ªÉ v√† th·ª±c t·∫ø ƒë·ªÉ √°p d·ª•ng v√†o cu·ªôc s·ªëng, ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ ${readingType.title}, 100-150 t·ª´]

**meditation**
[Nh·ªØng suy ng·∫´m s√¢u s·∫Øc v·ªÅ b√†i h·ªçc cu·ªôc s·ªëng v√† √Ω nghƒ©a tinh th·∫ßn, 100-120 t·ª´]`;
}

// Parse markdown format response from AI
function parseMarkdownResponse(content: string): AIReadingResponse | null {
  try {
    // Extract sections based on markdown headers - more flexible regex
    const interpretationMatch = content.match(/\*\*Gi·∫£i th√≠ch t·ªïng quan\*\*\s*([\s\S]*?)(?=\*\*[^*]+\*\*|$)/i);
    const adviceMatch = content.match(/\*\*L·ªùi khuy√™n th·ª±c t·∫ø\*\*\s*([\s\S]*?)(?=\*\*[^*]+\*\*|$)/i);
    const meditationMatch = content.match(/\*\*Suy ng·∫´m s√¢u s·∫Øc\*\*\s*([\s\S]*?)(?=\*\*[^*]+\*\*|$)/i);

    if (interpretationMatch && adviceMatch && meditationMatch) {
      return {
        interpretation: interpretationMatch[1].trim().replace(/^\n+|\n+$/g, ''),
        advice: adviceMatch[1].trim().replace(/^\n+|\n+$/g, ''),
        meditation: meditationMatch[1].trim().replace(/^\n+|\n+$/g, '')
      };
    }

    // Fallback: try to split by any bold headers
    const boldHeaderPattern = /\*\*[^*]+\*\*/g;
    const headers = content.match(boldHeaderPattern);
    const sections = content.split(boldHeaderPattern);
    
    if (sections.length >= 4 && headers && headers.length >= 3) {
      // Find sections that contain the keywords
      let interpretation = '', advice = '', meditation = '';
      
      for (let i = 0; i < headers.length; i++) {
        const header = headers[i].toLowerCase();
        const section = sections[i + 1]?.trim() || '';
        
        if (header.includes('gi·∫£i th√≠ch') || header.includes('t·ªïng quan')) {
          interpretation = section;
        } else if (header.includes('l·ªùi khuy√™n') || header.includes('khuy√™n')) {
          advice = section;
        } else if (header.includes('suy ng·∫´m') || header.includes('ng·∫´m')) {
          meditation = section;
        }
      }
      
      if (interpretation && advice && meditation) {
        return { interpretation, advice, meditation };
      }
    }

    return null;
  } catch (error) {
    console.error('Error parsing markdown response:', error);
    return null;
  }
}

export async function generateAIReading(
  cards: [TarotCard, TarotCard, TarotCard],
  apiKey?: string,
  readingType?: ReadingType
): Promise<AIReadingResponse | null> {
  // ∆Øu ti√™n s·ª≠ d·ª•ng API key truy·ªÅn v√†o, n·∫øu kh√¥ng c√≥ th√¨ l·∫•y t·ª´ environment
  const finalApiKey = apiKey || import.meta.env.VITE_GROQ_API_KEY;
  
  if (!finalApiKey) {
    return null; // Fallback to local generation if no API key
  }

  try {
    const prompt = readingType 
      ? createContextualPrompt(cards, readingType)
      : `B·∫°n l√† m·ªôt chuy√™n gia tarot chuy√™n nghi·ªáp v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám. H√£y gi·∫£i th√≠ch tr·∫£i b√†i 3 l√° sau m·ªôt c√°ch s√¢u s·∫Øc, t√¨nh c·∫£m v√† truy·ªÅn c·∫£m h·ª©ng:

**Qu√° kh·ª©**: ${cards[0].name} - ${cards[0].meaning.upright}
**Hi·ªán t·∫°i**: ${cards[1].name} - ${cards[1].meaning.upright} 
**T∆∞∆°ng lai**: ${cards[2].name} - ${cards[2].meaning.upright}

H√£y tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng markdown sau:

**interpretation**
[Gi·∫£i th√≠ch chi ti·∫øt h√†nh tr√¨nh qua 3 th·ªùi k·ª≥, k·∫øt n·ªëi c√°c l√° b√†i th√†nh m·ªôt c√¢u chuy·ªán m·∫°ch l·∫°c, 150-200 t·ª´]

**advice**
[L·ªùi khuy√™n c·ª• th·ªÉ v√† th·ª±c t·∫ø ƒë·ªÉ √°p d·ª•ng v√†o cu·ªôc s·ªëng, 100-150 t·ª´]

**meditation**
[Nh·ªØng suy ng·∫´m s√¢u s·∫Øc v·ªÅ b√†i h·ªçc cu·ªôc s·ªëng v√† √Ω nghƒ©a tinh th·∫ßn, 100-120 t·ª´]`;

    const response = await fetch(GROQ_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${finalApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'llama-3.1-8b-instant',
        messages: [
          {
            role: 'system',
            content: 'B·∫°n l√† chuy√™n gia tarot chuy√™n nghi·ªáp. Lu√¥n tr·∫£ v·ªÅ ONLY JSON object thu·∫ßn t√∫y, kh√¥ng c√≥ markdown hay text kh√°c.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 1000,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('API Error details:', errorText);
      throw new Error(`API Error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;

    // Log usage info
    console.log('üìä Groq Usage:', {
        prompt_tokens: data.usage?.prompt_tokens,
        completion_tokens: data.usage?.completion_tokens,
        total_tokens: data.usage?.total_tokens
    });

    if (content) {
      // Try parsing as JSON first
      try {
        return JSON.parse(content.trim());
      } catch {
        // If not JSON, try to find JSON block
        const jsonMatch = content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            return JSON.parse(jsonMatch[0]);
          } catch {
            // If JSON parsing fails, parse markdown format
            return parseMarkdownResponse(content);
          }
        } else {
          // Parse as markdown format
          return parseMarkdownResponse(content);
        }
      }
    }
    
    return null;
  } catch (error) {
    console.error('AI Reading generation failed:', error);
    return null;
  }
}

// Gemini Flash API (Google) - Alternative free option
export async function generateGeminiReading(
  cards: [TarotCard, TarotCard, TarotCard],
  apiKey?: string
): Promise<AIReadingResponse | null> {
  if (!apiKey) {
    return null;
  }

  try {
    const prompt = `CH√çNH X√ÅC: Ch·ªâ tr·∫£ v·ªÅ JSON object thu·∫ßn t√∫y, kh√¥ng markdown, kh√¥ng text kh√°c.

Gi·∫£i th√≠ch tr·∫£i b√†i tarot 3 l√°:
Qu√° kh·ª©: ${cards[0].name} - ${cards[0].meaning.upright}
Hi·ªán t·∫°i: ${cards[1].name} - ${cards[1].meaning.upright}
T∆∞∆°ng lai: ${cards[2].name} - ${cards[2].meaning.upright}

Format JSON ch√≠nh x√°c:
{
  "interpretation": "Gi·∫£i th√≠ch t·ªïng quan h√†nh tr√¨nh (ti·∫øng Vi·ªát, 150-200 t·ª´)",
  "advice": "L·ªùi khuy√™n th·ª±c t·∫ø (ti·∫øng Vi·ªát, 100-150 t·ª´)",
  "meditation": "Suy ng·∫´m s√¢u s·∫Øc (ti·∫øng Vi·ªát, 100-120 t·ª´)"
}`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 1000,
          }
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`Gemini API Error: ${response.status}`);
    }

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (content) {
      // Try parsing as JSON first
      try {
        return JSON.parse(content.trim());
      } catch {
        // If not JSON, try to find JSON block
        const jsonMatch = content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            return JSON.parse(jsonMatch[0]);
          } catch {
            // If JSON parsing fails, parse markdown format
            return parseMarkdownResponse(content);
          }
        } else {
          // Parse as markdown format
          return parseMarkdownResponse(content);
        }
      }
    }
    
    return null;
  } catch (error) {
    console.error('Gemini Reading generation failed:', error);
    return null;
  }
}